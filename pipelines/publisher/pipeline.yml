#@ load("@ytt:data", "data")

#@ def build_light_aws_stemcell_new(name, lts, stemcell_os, stemcell_version, builder_src, input_stemcell, output_stemcell, prefix, region, bucket_prefix, tag, ami_destinations):
do:
- #@ get_aws_light_stemcells(input_stemcell, lts, stemcell_os, stemcell_version, builder_src, tag)
- #@ build_light_aws_stemcell(name, builder_src, input_stemcell, output_stemcell, prefix, region, bucket_prefix, tag, ami_destinations)
#@ end

#@yaml/text-templated-strings
---
#@ def build_light_aws_stemcell(name, builder_src, input_stemcell, output_stemcell, prefix, region, bucket_prefix, tag, ami_destinations):
file: bosh-stemcells-ci/tasks/light-aws/build.yml
task: #@ name
input_mapping:
  builder-src: (@= builder_src @)
  input-stemcell: (@= input_stemcell @)
output_mapping:
  light-stemcell: (@= output_stemcell @)
params:
  ami_access_key: ((publish__(@= prefix @)_access_key))
  ami_bucket_name: ((publish__(@= bucket_prefix @)_bucket))
  ami_description: ((publish__ami_description))
  #@ if ami_destinations != "":
  ami_destinations: (@= ami_destinations @)
  #@ end
  ami_encrypted: ((publish__ami_encrypted))
  ami_kms_key_id: ((publish__ami_kms_key_id))
  ami_region: ((publish__(@= region @)_region))
  ami_secret_key: ((publish__(@= prefix @)_secret_key))
  ami_server_side_encryption: ((publish__(@= prefix @)_server_side_encryption))
  ami_virtualization_type: hvm
  ami_visibility: ((publish__ami_visibility))
  #@ if tag != "":
tags:
- #@ tag
  #@ end
#@ end

#@ def get_aws_light_stemcells(input_stemcell, lts, stemcell_os, stemcell_version, builder_src, tag):
in_parallel:
- get: (@= input_stemcell @)
  params:
    include_files:
    - bosh-stemcell-*-aws-xen-hvm-(@= stemcell_os @)-go_agent.tgz
  resource: candidate-(@= stemcell_os @)-stemcell-(@= stemcell_version @)(@= lts @)
  trigger: true
  version: every
  #@ if tag != "":
  tags:
  - #@ tag
  #@ end
- get: (@= builder_src @)
  passed:
  - test-aws-unit
  - test-aws-integration
  - test-aws-drivers
  resource: light-aws-builder-src
  #@ if tag != "":
  tags:
  - #@ tag
  #@ end
#@ end

#@ def get_google_light_inputs(stemcell_os, stemcell_version, lts):
in_parallel:
- get: stemcell
  params:
    include_files:
    - bosh-stemcell-*-google-kvm-(@= stemcell_os @)-go_agent.tgz
  resource: candidate-(@= stemcell_os @)-stemcell-(@= str(stemcell_version) @)(@= lts @)
  trigger: true
  version: every
- get: builder-src
  passed:
  - concourse-alignment
  resource: light-google-builder-src
- get: bosh-cli
- get: bosh-stemcells-ci
- get: bosh-cpi-release
  resource: bosh-google-cpi-release
#@ end

#@ def deploy_skeletal_google_light_stemcell(terraform_resource, credentials):
do:
- params:
    generate_random_name: true
    terraform_source: bosh-stemcells-ci/tasks/light-google/terraform/
  put: terraform
  resource: (@= terraform_resource @)
- file: bosh-stemcells-ci/tasks/light-google/deploy-skeletal.yml
  params:
    GCE_CREDENTIALS_JSON: (@= credentials @)
    SSH_PRIVATE_KEY: ((ssh_private_key))
  task: deploy-skeletal
ensure:
  ensure:
    get_params:
      action: destroy
    params:
      action: destroy
      env_name_file: terraform/name
      terraform_source: bosh-stemcells-ci/tasks/light-google/terraform/
    put: terraform
    resource: (@= terraform_resource @)
  file: bosh-stemcells-ci/tasks/light-google/destroy-skeletal.yml
  task: destroy-skeletal
on_failure:
  config:
    image_resource:
      source:
        repository: ubuntu
      type: registry-image
    platform: linux
    run:
      args:
      - |
        * remove artifacts of failed jobs:
        ```bash
        gcloud auth revoke --all # start with clean slate
        gcloud auth activate-service-account light-stemcell-editor@bosh-cpi.iam.gserviceaccount.com --key-file <(lpass show --note "THE LASTPASS NOTE" | grep -v "^#" )
        gsutil rm gs://bosh-gce-raw-stemcells/STEMCELL_TO_BE_DELETED_raw.tar.gz
        gsutil rm gs://bosh-gce-raw-stemcells/STEMCELL_TO_BE_DELETED_raw.tar.gz.sha1
        gcloud auth revoke --all
        ```
        * re-fly pipeline after commenting-out `disable_manual_trigger: true`
        * trigger failed jobs
        * re-fly pipeline after uncommenting `disable_manual_trigger: true`
      path: echo
  task: cleanup-failed-run-instructions
#@ end

#@ def run_stemcell_upload_tests(os):
do:
- in_parallel:
  - get: bosh-cpi-src
    resource: bosh-aws-cpi-release
    trigger: false
  - get: cpi-release
    resource: bosh-aws-cpi-dev-artifacts
    trigger: false
  - get: bosh-release
    trigger: false
  - get: bosh-deployment
    trigger: false
  - get: bosh-cli
    trigger: false
  - get: pipelines
    resource: bosh-cpi-certification-concourse-tasks
  - get: bosh-cpi-certification-concourse-tasks
- params:
    delete_on_failure: true
    generate_random_name: true
    terraform_source: bosh-cpi-src/ci/assets/terraform
  put: environment
  resource: light-aws-environment
- file: bosh-cpi-certification-concourse-tasks/shared/tasks/prepare-director.yml
  input_mapping:
    stemcell: light-stemcell
  params:
    DIRECTOR_VARS_FILE: ((alpha_aws_director_vars_file))
    INFRASTRUCTURE: aws
#@ if os == "trusty":
    OPTIONAL_OPS_FILE: |
      -o pipelines/shared/assets/ops/remove-hm.yml
      -o bosh-deployment/external-ip-with-registry-not-recommended.yml
      -o pipelines/shared/assets/ops/remove-provider-cert.yml
      -o pipelines/shared/assets/ops/use-supported-trusty-instance-types.yml
#@ else:
    OPTIONAL_OPS_FILE: |
      -o pipelines/shared/assets/ops/remove-hm.yml
      -o bosh-deployment/external-ip-with-registry-not-recommended.yml
      -o pipelines/shared/assets/ops/remove-provider-cert.yml
#@ end
  task: prepare-director
- file: bosh-cpi-certification-concourse-tasks/shared/tasks/deploy-director.yml
  input_mapping:
    stemcell: light-stemcell
  task: deploy-director
- file: bosh-stemcells-ci/tasks/light-aws/run-upload-test.yml
  input_mapping:
    builder-src: us-builder-src
    stemcell: light-stemcell
  task: run-stemcell-upload-tests
ensure:
  do:
  - file: bosh-cpi-certification-concourse-tasks/shared/tasks/teardown.yml
    task: teardown
  - file: bosh-cpi-src/ci/tasks/ensure-terminated.yml
    params:
      AWS_ACCESS_KEY_ID: ((alpha_aws_access_key__primary))
      AWS_DEFAULT_REGION: ((alpha_aws_region__primary))
      AWS_SECRET_ACCESS_KEY: ((alpha_aws_secret_key__primary))
    task: ensure-terminated
  - get_params:
      action: destroy
    params:
      action: destroy
      env_name_file: environment/name
      terraform_source: bosh-cpi-src/ci/assets/terraform
    put: environment
    resource: light-aws-environment
#@ end
---

#@ def build_china_light_stemcells():
- #@ build_light_aws_stemcell("build-china-north-stemcell", "cn-builder-src", "cn-input-stemcell", "cn-north-light-stemcell", "cn", "cn_north", "cn", "asia", "[]")
#@ end

#@yaml/text-templated-strings
---
groups:
- name: all
  jobs:
  - test-aws-unit
  - test-aws-drivers
  - test-aws-integration
  - concourse-alignment
  #@ for stemcell in data.values.oss:
    #@ if stemcell.build_aws:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
    #@ end
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  #@ end

  #@ for stemcell in data.values.lts:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  #@ end
- name: oss
  jobs:
  #@ for stemcell in data.values.oss:
    #@ if stemcell.build_aws:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
    #@ end
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  #@ end
- name: lts
  jobs:
  #@ for stemcell in data.values.lts:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  #@ end
#@ for stemcell in data.values.oss:
- name: (@= stemcell.os @)/(@= str(stemcell.version) @)
  jobs:
  #@ if stemcell.build_aws:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  #@ end
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
#@ end
#@ for stemcell in data.values.lts:
- name: (@= stemcell.os @)/(@= str(stemcell.version) @)
  jobs:
  - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
#@ end

jobs:
- name: test-aws-unit
  plan:
  - get: bosh-stemcells-ci
  - get: builder-src
    resource: light-aws-builder-src
    trigger: true
  - file: bosh-stemcells-ci/tasks/light-aws/test-unit.yml
    task: test
  serial: true

- name: test-aws-drivers
  plan:
  - get: bosh-stemcells-ci
  - get: builder-src
    resource: light-aws-builder-src
    trigger: true
  - file: bosh-stemcells-ci/tasks/light-aws/test-drivers.yml
    params:
      access_key: ((test__access_key))
      ami_fixture_id: ((test__ami_fixture_id))
      bucket_name: ((test__bucket_name))
      copy_region: ((test__copy_region))
      existing_snapshot_id: ((test__snapshot_fixture_id))
      existing_volume_id: ((test__volume_fixture_id))
      kms_key_id: ((test__kms_key_id))
      region: ((test__region))
      secret_key: ((test__secret_key))
      uploaded_machine_image_url: ((test__machine_image_fixture_url))
    task: test
  serial: true

- name: test-aws-integration
  plan:
  - get: bosh-stemcells-ci
  - get: builder-src
    resource: light-aws-builder-src
    trigger: true
  - file: bosh-stemcells-ci/tasks/light-aws/test-integration.yml
    params:
      access_key: ((test__access_key))
      bucket_name: ((test__bucket_name))
      cn_access_key: ((test__cn_access_key))
      cn_bucket_name: ((test__cn_bucket_name))
      cn_region: ((test__cn_region))
      cn_secret_key: ((test__cn_secret_key))
      copy_region: ((test__copy_region))
      region: ((test__region))
      secret_key: ((test__secret_key))
    task: test
  serial: true

- name: concourse-alignment
  plan:
  - get: builder-src
    resource: light-google-builder-src
    trigger: true
  serial: true

#@ for stemcell in data.values.lts:
- name: build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - get: bosh-stemcells-ci
  - in_parallel:
    - do:
      - #@ get_aws_light_stemcells("cn-input-stemcell", "-lts", stemcell.os, str(stemcell.version), "cn-builder-src", "asia")
      - in_parallel: #@ build_china_light_stemcells()
    - #@ build_light_aws_stemcell_new("build-us-gov-stemcell", "-lts", stemcell.os, str(stemcell.version), "us-gov-builder-src", "us-gov-input-stemcell", "us-gov-light-stemcell", "us-gov", "us-gov", "us-gov", "", "[]")
    - #@ build_light_aws_stemcell_new("build-us-stemcell", "-lts", stemcell.os, str(stemcell.version), "us-builder-src", "us-input-stemcell", "us-light-stemcell", "us", "us", "us", "", "")
  - file: bosh-stemcells-ci/tasks/light-aws/us-gov-merge-builds.yml
    input_mapping:
      builder-src: us-builder-src
    task: merge-builds
  - #@ run_stemcell_upload_tests("trusty")
  - params:
      files:
      - light-stemcell/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'candidate (light aws): ubuntu-trusty/(@= str(stemcell.version) @).x'
      version: us-input-stemcell/.resource/version
    put: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  serial: true

- name: build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - #@ get_google_light_inputs(stemcell.os, str(stemcell.version), "-lts")
  - file: bosh-stemcells-ci/tasks/light-google/build-light-stemcell.yml
    params:
      AWS_ACCESS_KEY_ID: ((lts_light_bucket_access_key))
      AWS_SECRET_ACCESS_KEY: ((lts_light_bucket_secret_key))
      BUCKET_NAME: ((lts_google_raw_stemcells_bucket_name))
      STEMCELL_BUCKET_PATH: pcf-lts-stemcells-candidate
    task: create-light-stemcell
  - in_parallel:
    - params:
        file: raw-stemcell/bosh-stemcell-*-google-kvm-ubuntu-*-go_agent-raw-*.tar.gz
        predefined_acl: publicRead
      put: base-lts-google-ubuntu-stemcell
    - params:
        file: raw-stemcell/bosh-stemcell-*-google-kvm-ubuntu-*-go_agent-raw-*.tar.gz.sha1
        predefined_acl: publicRead
      put: base-lts-google-ubuntu-stemcell-sha1
  - #@ deploy_skeletal_google_light_stemcell("light-google-environment-lts", "((lts_gce_credentials_json))")
  - params:
      files:
      - light-stemcell/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'candidate (light google): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      version: stemcell/.resource/version
    put: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  serial: true
#@ end

#@ for stemcell in data.values.oss:
  #@ if stemcell.build_aws:
- name: build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - get: bosh-stemcells-ci
  - in_parallel:
    - do:
      - #@ get_aws_light_stemcells("cn-input-stemcell", "", stemcell.os, str(stemcell.version), "cn-builder-src", "asia")
      - in_parallel: #@ build_china_light_stemcells()
    - #@ build_light_aws_stemcell_new("build-us-gov-stemcell", "", stemcell.os, str(stemcell.version), "us-gov-builder-src", "us-gov-input-stemcell", "us-gov-light-stemcell", "us-gov", "us-gov", "us-gov", "", "[]")
    - #@ build_light_aws_stemcell_new("build-us-stemcell", "", stemcell.os, str(stemcell.version), "us-builder-src", "us-input-stemcell", "us-light-stemcell", "us", "us", "us", "", "")
  - file: bosh-stemcells-ci/tasks/light-aws/us-gov-merge-builds.yml
    input_mapping:
      builder-src: us-builder-src
    task: merge-builds
  - #@ run_stemcell_upload_tests("xenial")
  - params:
      files:
      - light-stemcell/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'candidate (light aws): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      version: us-input-stemcell/.resource/version
    put: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  serial: true
  #@ end

- name: build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - #@ get_google_light_inputs(stemcell.os, str(stemcell.version), "")
  - task: make-raw-from-heavy-stemcell
    file: bosh-stemcells-ci/tasks/light-google/make-raw-from-heavy-stemcell.yml
    params:
      BUCKET_NAME: ((google_raw_stemcells_bucket_name))
      STEMCELL_BUCKET_PATH: ((bosh_io_light_stemcell_bucket))
  - params:
      file: raw-stemcell/bosh-stemcell-*-google-kvm-(@= stemcell.os_name @)-*-go_agent-raw-*.tar.gz
      predefined_acl: publicRead
    put: base-oss-google-ubuntu-stemcell
  - task: create-public-image
    file: bosh-stemcells-ci/tasks/light-google/create-public-image.yml
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gce_credentials_json))
      PROJECT_NAME: ((gce_project_id))

  - #@ deploy_skeletal_google_light_stemcell("light-google-environment-oss", "((gce_credentials_json))")
  - params:
      files:
      - light-stemcell/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'candidate (light google): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      version: stemcell/.resource/version
    put: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  serial: true
#@ end

#@ for stemcell in data.values.lts:
- name: publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - in_parallel:
    - get: bosh-stemcells-ci
    - get: bosh-linux-stemcell-builder
      resource: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
    - get: stemcell-metalink
      params:
        skip_download: true
      passed:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
      resource: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
    - get: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
      passed:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
    - get: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
      passed:
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
    - get: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
      passed:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
  - file: bosh-stemcells-ci/tasks/build-release-metadata.yml
    params:
      OS_NAME: (@= stemcell.os_name @)
      OS_VERSION: (@= stemcell.os_version @)
    task: build-release-metadata
  - params:
      files:
      - candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (heavy): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}/stemcells.meta4'
      version: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/.resource/version
    put: published-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  - params:
      files:
      - candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (light aws): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}.meta4'
      version: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/.resource/version
    put: published-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  - params:
      files:
      - candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (light google): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}.meta4'
      version: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts/.resource/version
    put: published-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  - params:
      body: release-metadata/body
      name: release-metadata/name
      tag: release-metadata/tag
    put: gh-release-lts
  - params:
      rebase: true
      repository: bosh-linux-stemcell-builder
    put: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
  - params:
      acl: public-read
      file: usn-log/usn-log.json
    put: usn-log-(@= str(stemcell.version) @).x
  serial: true
#@ end
#@ for stemcell in data.values.oss:
- name: publish-(@= stemcell.os @)-(@= str(stemcell.version) @)
  plan:
  - in_parallel:
    - get: bosh-stemcells-ci
    - get: bosh-linux-stemcell-builder
      resource: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
    - get: stemcell-metalink
      params:
        skip_download: true
      passed:
      #@ if stemcell.build_aws:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
      #@ end
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
      resource: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
    - get: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
      passed:
      #@ if stemcell.build_aws:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
      #@ end
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
    - get: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
      passed:
      - build-light-google-(@= stemcell.os @)-(@= str(stemcell.version) @)
    #@ if stemcell.build_aws:
    - get: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
      passed:
      - build-light-aws-(@= stemcell.os @)-(@= str(stemcell.version) @)
    #@ end
  - file: bosh-stemcells-ci/tasks/build-release-metadata.yml
    params:
      OS_NAME: (@= stemcell.os_name @)
      OS_VERSION: (@= str(stemcell.os_version) @)
    task: build-release-metadata
  - params:
      files:
      - candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (heavy): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}/stemcells.meta4'
      version: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/.resource/version
    put: published-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)

  #@ if stemcell.build_aws:
  - params:
      files:
      - candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (light aws): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}/stemcells.aws.meta4'
      version: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/.resource/version
    put: published-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  #@ end
  - params:
      files:
      - candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/*.tgz
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: 'publish (light google): (@= stemcell.os @)/(@= str(stemcell.version) @).x'
      rename: '{{.Version}}/stemcells.gcp.meta4'
      version: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)/.resource/version
    put: published-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  - params:
      body: release-metadata/body
      name: release-metadata/name
      tag: release-metadata/tag
    put: gh-release-oss
  - params:
      rebase: true
      repository: bosh-linux-stemcell-builder
    put: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
  - params:
      acl: public-read
      file: usn-log/usn-log.json
    put: usn-log-(@= str(stemcell.version) @).x
  serial: true
#@ end

resource_types:
- name: metalink-repository
  source:
    repository: dpb587/metalink-repository-resource
  type: registry-image
- name: terraform_type
  source:
    repository: ljfranklin/terraform-resource
  type: registry-image
- name: gcs-resource
  source:
    repository: frodenas/gcs-resource
  type: registry-image

resources:
- name: gh-release-oss
  type: github-release
  source:
    access_token: ((github_bosh_linux_stemcell_builder_release_maker_token))
    drafts: true
    owner: cloudfoundry
    repository: bosh-linux-stemcell-builder

#@ if data.values.lts != [] :
- name: gh-release-lts
  type: github-release
  source:
    access_token: ((github_bosh_linux_stemcell_builder_release_maker_token))
    drafts: true
    owner: pivotal-cf
    repository: bosh-linux-stemcell-builder-lts
- name: light-google-environment-lts
  source:
    delete_on_failure: true
    storage:
      access_key_id: ((lts_terraform_bucket_access_key))
      bucket: ((lts_terraform_bucket_name))
      bucket_path: stemcell-ci-terraform/
      secret_access_key: ((lts_terraform_bucket_secret_key))
    vars:
      gce_credentials_json: ((lts_gce_credentials_json))
      gce_project_id: ((lts_gce_project_id))
  type: terraform_type
- name: base-lts-google-ubuntu-stemcell
  source:
    bucket: ((lts_google_raw_stemcells_bucket_name))
    json_key: ((lts_gce_credentials_json))
    regexp: bosh-stemcell-([0-9\.]+)-google-kvm-ubuntu-*-go_agent-raw.tar.gz
  type: gcs-resource
- name: base-lts-google-ubuntu-stemcell-sha1
  source:
    bucket: ((lts_google_raw_stemcells_bucket_name))
    json_key: ((lts_gce_credentials_json))
    regexp: bosh-stemcell-([0-9\.]+)-google-kvm-ubuntu-*-go_agent-raw.tar.gz.sha1
  type: gcs-resource
#@ end

- name: bosh-cpi-certification-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/bosh-cpi-certification

- name: bosh-cli
  type: s3
  source:
    bucket: bosh-cli-artifacts
    regexp: bosh-cli-([0-9.]+)-linux-amd64
    region_name: us-east-1

- name: bosh-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh

- name: bosh-deployment
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-deployment

- name: bosh-stemcells-ci
  type: git
  source:
    branch: master
    private_key: ((bosh_stemcells_ci_private_key))
    uri: git@github.com:pivotal-cf/bosh-stemcells-ci

- name: light-aws-builder-src
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-aws-light-stemcell-builder

- name: bosh-aws-cpi-release
  type: git
  source:
    branch: master
    ignore_paths:
    - .final_builds/**/*.yml
    - releases/**/*.yml
    uri: https://github.com/cloudfoundry-incubator/bosh-aws-cpi-release.git

- name: light-aws-environment
  source:
    storage:
      access_key_id: ((alpha_aws_access_key__primary))
      bucket: ((alpha_terraform_bucket))
      bucket_path: terraform-state
      secret_access_key: ((alpha_aws_secret_key__primary))
    vars:
      access_key: ((alpha_aws_access_key__primary))
      public_key: ((alpha_pipeline_public_key))
      region: ((alpha_aws_region__primary))
      secret_key: ((alpha_aws_secret_key__primary))
  type: terraform_type
- name: bosh-aws-cpi-dev-artifacts
  source:
    access_key_id: ((alpha_cpi_access_key__primary))
    bucket: bosh-aws-cpi-pipeline
    regexp: bosh-aws-cpi-(\d+\.\d+\.\d+)\.tgz
    region_name: us-east-1
    secret_access_key: ((alpha_cpi_secret_key__primary))
  type: s3

- name: bosh-google-cpi-release
  source:
    repository: cloudfoundry-incubator/bosh-google-cpi-release
  type: bosh-io-release
- name: light-google-builder-src
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-google-light-stemcell-builder.git
  type: git
- name: light-google-environment-oss
  source:
    delete_on_failure: true
    storage:
      access_key_id: ((terraform_bucket_access_key))
      bucket: ((terraform_bucket_name))
      bucket_path: stemcell-ci-terraform/
      secret_access_key: ((terraform_bucket_secret_key))
    vars:
      gce_credentials_json: ((gce_credentials_json))
      gce_project_id: ((gce_project_id))
  type: terraform_type
- name: base-oss-google-ubuntu-stemcell
  source:
    bucket: ((google_raw_stemcells_bucket_name))
    json_key: ((gce_credentials_json))
    regexp: bosh-stemcell-([0-9\.]+)-google-kvm-ubuntu-*-go_agent-raw.tar.gz
  type: gcs-resource

#@ for stemcell in data.values.lts:
- name: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/pcf-lts-stemcells-candidate/{{.Version}}/{{.Name}}
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//candidate-aws-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_light_bucket_access_key))
        secret_key: ((lts_light_bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/pcf-lts-stemcells-candidate/{{.Version}}/{{.Name}}
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//candidate-gcp-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_light_bucket_access_key))
        secret_key: ((lts_light_bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    filters:
    - repositorypath: '*/stemcells.meta4'
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//candidate/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_stemcell_aws_access_key))
        secret_key: ((lts_stemcell_aws_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
  source:
    branch: (@= str(stemcell.version) @).x
    private_key: ((bosh_linux_stemcell_builder_lts_private_key))
    uri: ((bosh_linux_stemcell_builder_lts_uri))
  type: git
- name: usn-log-(@= str(stemcell.version) @).x
  source:
    access_key_id: ((bosh_usn_and_periodic_aws_access_key_id))
    bucket: bosh-stemcell-triggers
    secret_access_key: ((bosh_usn_and_periodic_aws_secret_access_key))
    versioned_file: (@= str(stemcell.version) @).x/usn-log.json
  type: s3
- name: published-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    filters:
    - repositorypath: (@= str(stemcell.version) @).*.meta4
    mirror_files:
    - destination: s3://s3.amazonaws.com/pcf-lts-stemcells/{{.Version}}/{{.Name}}
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//published-aws-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_light_bucket_access_key))
        secret_key: ((lts_light_bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: published-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    filters:
    - repositorypath: (@= str(stemcell.version) @).*.meta4
    mirror_files:
    - destination: s3://s3.amazonaws.com/pcf-lts-stemcells/{{.Version}}/{{.Name}}
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//published-gcp-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_light_bucket_access_key))
        secret_key: ((lts_light_bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: published-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)-lts
  source:
    filters:
    - repositorypath: '*/stemcells.meta4'
    mirror_files:
    - destination: s3://s3.amazonaws.com/pcf-lts-stemcells/{{.Version}}/{{.Name}}
    options:
      private_key: ((lts_stemcells_private_key))
    uri: git+ssh://git@github.com:pivotal-cf/bosh-core-lts-stemcells-index.git//published/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((lts_stemcell_aws_access_key))
        secret_key: ((lts_stemcell_aws_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
#@ end

#@ for stemcell in data.values.oss:
  #@ if stemcell.build_aws:
- name: candidate-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/bosh-aws-light-stemcells-candidate/{{.Version}}/{{.Name}}
    options:
      private_key: ((stemcells_index__github_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-cpi-index.git//candidate-aws-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((output__bucket_access_key))
        secret_key: ((output__bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
  #@ end
- name: candidate-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/bosh-gce-light-stemcells-candidate/{{.Version}}/{{.Name}}
    options:
      private_key: ((stemcells_index__github_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-cpi-index.git//candidate-gcp-light/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((google_light_stemcells_access_key_id))
        secret_key: ((google_light_stemcells_secret_access_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
- name: candidate-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    filters:
    - repositorypath: '*/stemcells.meta4'
    options:
      private_key: ((boshio_stemcells_index_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-core-index.git//candidate/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository

- name: bosh-linux-stemcell-builder-(@= stemcell.os @)-(@= str(stemcell.version) @).x
  source:
    branch: (@= stemcell.branch if hasattr(stemcell, "branch") else "{}/{}.x".format(stemcell.os, stemcell.version) @)
    private_key: ((bosh_src_key))
    uri: git@github.com:cloudfoundry/bosh-linux-stemcell-builder
  type: git

- name: usn-log-(@= str(stemcell.version) @).x
  source:
    access_key_id: ((bosh_usn_and_periodic_aws_access_key_id))
    bucket: bosh-stemcell-triggers
    secret_access_key: ((bosh_usn_and_periodic_aws_secret_access_key))
    versioned_file: (@= str(stemcell.version) @).x/usn-log.json
  type: s3

  #@ if stemcell.build_aws:
- name: published-aws-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    filters:
    - repositorypath: '*/stemcells.aws.meta4'
    mirror_files:
    - destination: s3://bosh-aws-light-stemcells.s3-accelerate.amazonaws.com/{{.Version}}/{{.Name}}
    options:
      private_key: ((stemcells_index__github_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-cpi-index.git//published/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((output__bucket_access_key))
        secret_key: ((output__bucket_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
  #@ end

- name: published-google-light-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    filters:
    - repositorypath: '*/stemcells.gcp.meta4'
    mirror_files:
    - destination: s3://bosh-gce-light-stemcells.s3-accelerate.amazonaws.com/{{.Version}}/{{.Name}}
    options:
      private_key: ((stemcells_index__github_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-cpi-index.git//published/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((google_light_stemcells_access_key_id))
        secret_key: ((google_light_stemcells_secret_access_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository

- name: published-(@= stemcell.os @)-stemcell-(@= str(stemcell.version) @)
  source:
    filters:
    - repositorypath: '*/stemcells.meta4'
    mirror_files:
    - destination: s3://bosh-core-stemcells.s3-accelerate.amazonaws.com/{{.Version}}/{{.Name}}
    options:
      private_key: ((boshio_stemcells_index_key))
    uri: git+ssh://git@github.com:bosh-io/stemcells-core-index.git//published/(@= stemcell.os @)
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((stemcell_aws_access_key))
        secret_key: ((stemcell_aws_secret_key))
      type: s3
    version: (@= str(stemcell.version) @).x
  type: metalink-repository
#@ end
